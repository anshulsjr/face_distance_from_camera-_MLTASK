import cv2
import math
def calculate_distance(focal_length, known_width, pixel_width):
    return (known_width * focal_length) / pixel_width
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
KNOWN_FACE_WIDTH = 14 
KNOWN_DISTANCE = 30 
cap = cv2.VideoCapture(0)
while True:
    ret, frame = cap.read()
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    for (a, b, c, d) in faces:
        focal_length = (KNOWN_FACE_WIDTH * KNOWN_DISTANCE) / w

        distance = calculate_distance(focal_length, KNOWN_FACE_WIDTH, w)

        cv2.rectangle(frame, (a, b), (a+c, b+d), (0, 255, 0), 2)

        cv2.putText(frame, f"Distance: {distance:.2f} cm", (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

    cv2.imshow("Face Distance Measurement", frame)

    if cv2.waitKey(1) & 0xFF == ord('F'):
        break
cap.release()
cv2.destroyAllWindows()
